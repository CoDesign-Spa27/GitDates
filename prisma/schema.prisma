// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    String     @id @default(uuid())
  email String  @unique
  username String? @unique
  name  String?
  password String?
  emailVerified DateTime? @map("email_verified")
  image String?
  avatar String?
  gender String?
  city String?
  state String?
  country String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  dob DateTime?
  accounts      Account[]
  sessions      Session[]
  gitDateProfile GitDateProfile?
  preferences   MatchPreference?
  sentMatches     Match[]         @relation("Sender")
  receivedMatches Match[]         @relation("Receiver")

  @@map("users")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String?
  provider          String
  providerAccountId String   @map("provider_account_id")
  token_type        String?
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  scope             String?
  id_token          String?  @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String   @unique @map("session_token") @db.Text
  accessToken  String?  @map("access_token") @db.Text
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model GitDateProfile {
  id              String   @id @default(uuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  githubUsername  String   @unique
  name            String?
  image           String?
  repositories    Int      @default(0)
  followers       Int      @default(0)
  following       Int      @default(0)
  mainLanguages   String[] 
  contributions   Int      @default(0)
  bio            String?
  city           String?
  state          String?
  country        String?
  blog           String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("github_profiles")
}

model MatchPreference {
  id              String   @id @default(uuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  ageMin          Int?
  ageMax          Int?
  languages       String[]  
  city            String?
  state           String?
  country         String?
  gender          String?
  minContributions Int?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("match_preferences")
}

model Match {
  id          String   @id @default(uuid())
  senderId    String
  receiverId  String
  status      MatchStatus @default(PENDING)
  sender      User     @relation("Sender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver    User     @relation("Receiver", fields: [receiverId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([senderId, receiverId])
  @@map("matches")
}

enum MatchStatus {
  PENDING
  ACCEPTED
  REJECTED
}
